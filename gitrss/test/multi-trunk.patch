diff --git a/unified_diff.py b/unified_diff.py
index ebbd1fb..773209b 100644
--- a/unified_diff.py
+++ b/unified_diff.py
@@ -6,7 +6,6 @@ from __future__ import print_function
 import html_helper
 import re
 import sys
-import pdb
 
 
 class UnifiedDiffTrunk(object):
@@ -22,7 +21,10 @@ class UnifiedDiffTrunk(object):
             sys.exit(1)
 
     def line_info(self):
-        line_pos = r"[" + re.escape("+-") + r"]\d+"
+        """
+        Return: the line info with heading and trailing @@
+        @@ from-file-line-numbers to-file-line-numbers @@
+        """
         reg = re.compile(r"(?P<chunk_header>@@ .* @@)")
         for line in self.trunk:
             match = reg.match(line)
@@ -59,9 +61,25 @@ class UnifiedDiffTrunk(object):
             return self._format_to_html_inline_css()
 
     def _format_to_html_external_css(self):
-        """Produce html with external css style."""
-        ret = []
-        return "".join(ret)
+        """Produce html with external css style, two-side layout.
+
+        Note: Users need to supply his/her css file, where the following
+              class are defined:
+
+              ud_table: Table style.
+              ud_lineno: Line number style.
+              ud_neutral: The style for unchanged lines.
+              ud_minus: The style for deleted lines in the old revision.
+              ud_plus: The style for added lines in the new revision.
+        """
+        table_attrs = {"class": "ud_table"}
+        lineno_attrs = {"class": "ud_lineno"}
+        plus_attrs = {"class": "ud_plus"}
+        minus_attrs = {"class": "ud_minus"}
+        neutral_attrs = {"class": "ud_neutral"}
+        return self._format_to_html_general(table_attrs, lineno_attrs,
+                                            neutral_attrs, minus_attrs,
+                                            plus_attrs)
 
     def _format_to_html_inline_css(self):
         """Produce html with inline css style, two-side layout.
@@ -75,32 +93,42 @@ class UnifiedDiffTrunk(object):
             "style": ("white-space: pre-wrap; "
                       "font-family: Courier New, Courier, monospace; ")
             }
-        td_attrs_plus = {"style": "background-color: yellowgreen; width: 45%"
-        }
-        td_attrs_minus = {"style": "background-color: pink; width: 45%"
-        }
-        td_attrs_neutral = {"style": "background-color: inherit; width: 45%"
-        }
-
+        lineno_attrs = {"style": ("background-color: lightgray; "
+                                  "text-align: right;")}
+        neutral_attrs = {"style": ("background-color: inherit; "
+                                   "width: 45%")}
+        minus_attrs = {"style": "background-color: pink; width: 45%"}
+        plus_attrs = {"style": ("background-color: yellowgreen; "
+                                "width: 45%")}
+
+        return self._format_to_html_general(table_attrs, lineno_attrs,
+                                            neutral_attrs, minus_attrs,
+                                            plus_attrs)
+
+
+    def _format_to_html_general(self, table_attrs, lineno_attrs,
+                                neutral_attrs, minus_attrs, plus_attrs):
+        """General method to produce diff table. The css styles are given by
+        callers.
+        """
         lineno_old, len_old, lineno_new, len_new = self.diff_at()
         lineno_old = abs(lineno_old)
         lineno_new = abs(lineno_new)
-        empty_row = ["<td></td>" for i in range(4)]
-        rows = [["<td></td>" for i in range(4)]
-                for j in range(max(len_old, len_new)+1)]
+        rows = [["<td></td>" for _ in range(4)]
+                for _ in range(max(len_old, len_new)+1)]
         row_old = 0
         row_new = 0
 
         for line in self.trunk:
             tline = html_helper.replace_lt_gt(line)
+            lblock_old = html_helper.td_block(str(lineno_old), lineno_attrs)
+            lblock_new = html_helper.td_block(str(lineno_new), lineno_attrs)
             if len(line) <= 0:
                 pass
             elif line[0] == " ":
                 row_old = max(row_old, row_new)
                 row_new = row_old
-                tblock = html_helper.td_block([tline], td_attrs_neutral)
-                lblock_old = self._td_block_lineno(lineno_old)
-                lblock_new = self._td_block_lineno(lineno_new)
+                tblock = html_helper.td_block([tline], neutral_attrs)
                 rows[row_old][0] = lblock_old
                 rows[row_old][1] = tblock
                 rows[row_new][2] = lblock_new
@@ -110,15 +138,13 @@ class UnifiedDiffTrunk(object):
                 row_old += 1
                 row_new += 1
             elif line[0] == "-":
-                lblock_old = self._td_block_lineno(lineno_old)
-                tblock = html_helper.td_block([tline], td_attrs_minus)
+                tblock = html_helper.td_block([tline], minus_attrs)
                 rows[row_old][0] = lblock_old
                 rows[row_old][1] = tblock
                 lineno_old += 1
                 row_old += 1
             elif line[0] == "+":
-                lblock_new = self._td_block_lineno(lineno_new)
-                tblock = html_helper.td_block([tline], td_attrs_plus)
+                tblock = html_helper.td_block([tline], plus_attrs)
                 rows[row_new][2] = lblock_new
                 rows[row_new][3] = tblock
                 lineno_new += 1
@@ -134,11 +160,6 @@ class UnifiedDiffTrunk(object):
                  html_helper.close_tag("table")]
         return "\n".join(html)
 
-    def _td_block_lineno(self, lineno):
-        td_attrs_lineno = {"style": "background-color: lightgray; text-align: right;",
-                           }
-        return html_helper.td_block([str(lineno)], td_attrs_lineno)
-
 
 class UnifiedDiff(object):
     """
@@ -180,7 +201,7 @@ class UnifiedDiff(object):
         --- a/src/eval_env.cc
         +++ b/src/eval_env.cc
         """
-        reg = re.compile("--- a/(?P<file_name>.+)")
+        reg = re.compile("%s b/(?P<file_name>.+)" % (re.escape("+++")))
         for line in self.diff:
             match = reg.match(line)
             if match:
