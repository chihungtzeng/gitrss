@@ -75,32 +93,42 @@ class UnifiedDiffTrunk(object):
             "style": ("white-space: pre-wrap; "
                       "font-family: Courier New, Courier, monospace; ")
             }
-        td_attrs_plus = {"style": "background-color: yellowgreen; width: 45%"
-        }
-        td_attrs_minus = {"style": "background-color: pink; width: 45%"
-        }
-        td_attrs_neutral = {"style": "background-color: inherit; width: 45%"
-        }
-
+        lineno_attrs = {"style": ("background-color: lightgray; "
+                                  "text-align: right;")}
+        neutral_attrs = {"style": ("background-color: inherit; "
+                                   "width: 45%")}
+        minus_attrs = {"style": "background-color: pink; width: 45%"}
+        plus_attrs = {"style": ("background-color: yellowgreen; "
+                                "width: 45%")}
+
+        return self._format_to_html_general(table_attrs, lineno_attrs,
+                                            neutral_attrs, minus_attrs,
+                                            plus_attrs)
+
+
+    def _format_to_html_general(self, table_attrs, lineno_attrs,
+                                neutral_attrs, minus_attrs, plus_attrs):
+        """General method to produce diff table. The css styles are given by
+        callers.
+        """
         lineno_old, len_old, lineno_new, len_new = self.diff_at()
         lineno_old = abs(lineno_old)
         lineno_new = abs(lineno_new)
-        empty_row = ["<td></td>" for i in range(4)]
-        rows = [["<td></td>" for i in range(4)]
-                for j in range(max(len_old, len_new)+1)]
+        rows = [["<td></td>" for _ in range(4)]
+                for _ in range(max(len_old, len_new)+1)]
         row_old = 0
         row_new = 0
 
         for line in self.trunk:
             tline = html_helper.replace_lt_gt(line)
+            lblock_old = html_helper.td_block(str(lineno_old), lineno_attrs)
+            lblock_new = html_helper.td_block(str(lineno_new), lineno_attrs)
             if len(line) <= 0:
                 pass
             elif line[0] == " ":
                 row_old = max(row_old, row_new)
                 row_new = row_old
-                tblock = html_helper.td_block([tline], td_attrs_neutral)
-                lblock_old = self._td_block_lineno(lineno_old)
-                lblock_new = self._td_block_lineno(lineno_new)
+                tblock = html_helper.td_block([tline], neutral_attrs)
                 rows[row_old][0] = lblock_old
                 rows[row_old][1] = tblock
                 rows[row_new][2] = lblock_new
